--- Expect.pm-1.07/tutorial/2.A.ftp	Sun Jul 12 08:12:32 1998
+++ Expect.pm-1.07/tutorial.new/2.A.ftp	Fri Oct  8 00:33:30 1999
@@ -1,4 +1,4 @@
-#!/usr/local/bin/perl
+#!/usr/bin/perl
 #	This example demonstrates how to spawn an ftp process, have it
 #log in to a host, and grab a file off the host. This should give you a
 #general idea of how to spawn processes and talk to them.
--- Expect.pm-1.07/tutorial/2.B.rlogin	Sun Jul 12 08:14:06 1998
+++ Expect.pm-1.07/tutorial.new/2.B.rlogin	Fri Oct  8 00:33:36 1999
@@ -1,4 +1,4 @@
-#!/usr/local/bin/perl
+#!/usr/bin/perl
 #	There are three new things in this example. First is the concept
 #of closing the process, second is the concept of using regular
 #expressions in match patterns, and third is the concept of grabbing
--- Expect.pm-1.07/tutorial/3.A.debugging	Sun Jun 21 06:50:29 1998
+++ Expect.pm-1.07/tutorial.new/3.A.debugging	Fri Oct  8 00:33:42 1999
@@ -1,4 +1,4 @@
-#!/usr/local/bin/perl
+#!/usr/bin/perl
 #	This example demonstrates how to use the debugging features in 
 #expect. They're reasonably straghtforward.
 #
--- Expect.pm-1.07/tutorial/4.A.top	Sun Jun 21 07:24:43 1998
+++ Expect.pm-1.07/tutorial.new/4.A.top	Fri Oct  8 00:33:47 1999
@@ -1,4 +1,4 @@
-#!/usr/local/bin/perl
+#!/usr/bin/perl
 #	This example is a replay of sorts of the rlogin example
 #before except in this example we turn control of the process back
 #to the user through use of interact().
--- Expect.pm-1.07/tutorial/5.A.top	Sat Jun 20 22:50:32 1998
+++ Expect.pm-1.07/tutorial.new/5.A.top	Fri Oct  8 00:33:52 1999
@@ -1,4 +1,4 @@
-#!/usr/local/bin/perl
+#!/usr/bin/perl
 #	Here we are doing this again only this time we'll do it
 #without Echoing the password.
 	
--- Expect.pm-1.07/tutorial/5.B.top	Sat Jun 20 22:46:03 1998
+++ Expect.pm-1.07/tutorial.new/5.B.top	Fri Oct  8 00:33:57 1999
@@ -1,4 +1,4 @@
-#!/usr/local/bin/perl
+#!/usr/bin/perl
 #	Here we set manual_stty on the process so we can do things like
 #hit ^Z to stop it instead of the ^Z going to the process on the other machine.
 #	This is to say, normally when you interact with a process STDIN is
